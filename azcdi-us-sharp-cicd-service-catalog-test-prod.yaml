AWSTemplateFormatVersion: '2010-09-09'
Description: DMP CF template is used for creating CI CD Pipeline.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Common Parameters"
        Parameters:
          -   CostCenter
          -   AccountName
          -   Environment
          -   MarketCode
          -   BusinessUnit
          -   ApplicationName
          -   CodeCommitBranch
          -   CodeBucket
          -   CMKARN
          -   SecurityGroups
          -   SubnetId
      -
        Label:
          default: "Test Account Details, only when creating pipeline for TEST"
        Parameters:
          -   ReviewerEmailId
          -   TestAccount
          -   FirstTestPipelineAtBULevel
      -
        Label:
          default: "Prod Account Details, only when creating pipeline for PROD"
        Parameters:
          -   ProdAccount
          -   FirstProdPipelineAtBULevel
Parameters:
  AccountName:
    ConstraintDescription: Must select a valid account name.
    Type: String
    Description: Select an account name from drop-down menu*
  MarketCode:
    ConstraintDescription: Must select a valid market code.
    Default: us
    Type: String
    AllowedValues:
        - us
        - eu
        - apac
    Description: Select a market code from drop-down menu*
  Environment:
    ConstraintDescription: Must select dev to start new application.
    Default: test
    Type: String
    AllowedValues:
        - test
        - prod
    Description: Select an appropriate environment from the drop-down menu*
  BusinessUnit:
    AllowedPattern: "[ a-z0-9]{1,63}"
    ConstraintDescription: This is a required field. Must be in a lowercase, Can include hyphens(-) but not spaces and underscores(_). Maximum of 63 alphanumeric characters.
    Type: String
    MaxLength: '63'
    MinLength: '1'
    Description: Provide a business unit associated with this application*
  ApplicationName:
    AllowedPattern: "[ a-z0-9]{1,63}"
    ConstraintDescription: This is a required field. Must be in a lowercase, Can include hyphens(-) but not spaces and underscores(_). Maximum of 63 alphanumeric characters.
    Type: String
    MaxLength: '63'
    MinLength: '1'
    Description: Provide an appropriate application name*
  CostCenter:
    AllowedPattern: "[ a-z0-9.-]{1,63}"
    ConstraintDescription: This is a required field. Must be in a lowercase, Can include hyphens(-) but not spaces and underscores(_). Maximum of 63 alphanumeric characters.
    Type: String
    MaxLength: '63'
    MinLength: '1'
    Description: Provide the cost center associated with this application*
  CodeBucket:
    AllowedPattern: "[ a-z0-9 -]{1,99}"
    ConstraintDescription: This is a required field. Must be in a lowercase. Maximum of 99 alphanumeric characters.
    Type: String
    Description: Provide bucket name of source code (must be lowercase)*
  CMKARN:
    ConstraintDescription: This is a CMK used to encrypt/decrypt artifacts.
    Type: String
    MaxLength: '100'
    MinLength: '1'
    Description: Provide the CMK ARN used to encrypt/decrypt artifacts*
  CodeCommitBranch:
    ConstraintDescription: Must select a valid CodeCommit branch.
    Default: test
    Type: String
    AllowedValues:
        - test
        - main
    Description: Select a code commit branch from drop-down menu*
  ReviewerEmailId:
    ConstraintDescription: Must provide a appropriate code reviewer Email Id.
    Type: String
    Default: NA
    Description: Provide the approval email Id having a codepipeline approval access.
  TestAccount:
    ConstraintDescription: Must provide a valid Test AWS account number.
    Description: AWS AccountNumber for test environment.
    Type: Number
    Default: 0
  ProdAccount:
    ConstraintDescription: Must provide a valid Prod AWS account number.
    Description: AWS AccountNumber for Prod environment.
    Type: Number
    Default: 0
  SecurityGroups:
    Description: Must enter security group(s), seperated by comma*
    Type: String
  SubnetId:
    Description: Must enter subnet-id(s), seperated by comma*
    Type: String
  FirstTestPipelineAtBULevel:
    Description: Select YES from the drop-down menu ONLY if it's a first TEST pipeline of BU, else set it to NO.
    Type: String
    Default: 'no'
    AllowedValues:
        - 'yes'
        - 'no'
        - 'NA'
  FirstProdPipelineAtBULevel:
    Description: Select YES from the drop-down menu ONLY if it's a first PROD pipeline of BU, else set it to NO.
    Type: String
    Default: 'no'
    AllowedValues:
        - 'yes'
        - 'no'
        - 'NA'
Conditions:
  AddBucketPolicy: !Or [ !Equals [ !Ref FirstTestPipelineAtBULevel, 'yes' ], !Equals [ !Ref FirstProdPipelineAtBULevel, 'yes' ] ]
  TestEnv: !Equals [ !Ref Environment, 'test' ]
  ProdEnv: !Equals [ !Ref Environment, 'prod' ]

Resources:
  S3ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: AddBucketPolicy
    Properties:
      Bucket: !Sub ${AccountName}-${MarketCode}-${BusinessUnit}-artifacts-dev
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${AccountName}-${MarketCode}-${BusinessUnit}-artifacts-dev
              - !Sub arn:aws:s3:::${AccountName}-${MarketCode}-${BusinessUnit}-artifacts-dev/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${TestAccount}:role/azcdi-cloudformation-deploy-role
                - !Sub arn:aws:iam::${TestAccount}:role/AWSCloudFormationStackSetExecutionRole
                - !Sub arn:aws:iam::${ProdAccount}:role/azcdi-cloudformation-deploy-role
                - !Sub arn:aws:iam::${ProdAccount}:role/AWSCloudFormationStackSetExecutionRole
                - !If
                  - TestEnv
                  - !Sub arn:aws:iam::${TestAccount}:role/${AccountName}-${MarketCode}-sharp-${BusinessUnit}-lambda-role
                  - !Ref AWS::NoValue
                - !If
                  - ProdEnv
                  - !Sub arn:aws:iam::${ProdAccount}:role/${AccountName}-${MarketCode}-sharp-${BusinessUnit}-lambda-role
                  - !Ref AWS::NoValue 
  MySnsTopic:
    Type: AWS::SNS::Topic
    Condition: TestEnv
    Properties:
      TopicName: !Join [ "-", [ !Ref AccountName,!Ref MarketCode,!Ref BusinessUnit,!Ref ApplicationName,"snstopic", !Ref Environment ] ]
      DisplayName: !Join [ "-", [ !Ref AccountName,!Ref MarketCode,!Ref BusinessUnit,!Ref ApplicationName,"snstopic", !Ref Environment ] ]
      Tags:
        - Key: "Application"
          Value: !Ref ApplicationName
        - Key: "AWSRegion"
          Value: !Ref "AWS::Region"
        - Key: "AccountID"
          Value: !Ref "AWS::AccountId"
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "MarketCode"
          Value: !Ref MarketCode
        - Key: "Organization"
          Value: "Commercial IT"
        - Key: "Owner"
          Value: !Ref BusinessUnit
        - Key: "Version"
          Value: "1"
  MySnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Condition: TestEnv
    Properties:
      Protocol: email
      TopicArn: !Ref MySnsTopic
      Endpoint: !Ref ReviewerEmailId

  ReleaseBranchCreation:
    Type: AWS::CodeBuild::Project
    Condition: TestEnv
    Properties:
      Name: !Join [ "-", [!Ref AccountName,!Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName, "codebuild-relbranch-creation", !Ref Environment] ]
      Description: !Ref ApplicationName
      EncryptionKey: !Ref CMKARN
      ServiceRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AccountName}-${MarketCode}-sharp-${BusinessUnit}-cicd-role-${Environment}'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: S3Bucket
            Value: !Join ["-", [!Ref AccountName, !Ref MarketCode, !Ref BusinessUnit, "artifacts", "dev"]]
          - Name : appname
            Value: !Join [ "-", [!Ref AccountName,!Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName] ]
          - Name : env
            Value: !Ref Environment
          - Name: ApplicationName
            Value: !Ref ApplicationName
          - Name: AccountName
            Value: !Ref AccountName
          - Name: MarketCode
            Value: !Ref MarketCode
          - Name: BusinessUnit
            Value: !Ref BusinessUnit
          - Name: Region
            Value: !Ref "AWS::Region"
          - Name: CodeBucket
            Value: !Ref CodeBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.7
              commands:
                  - echo "We are in install phase"
            pre_build:
              commands:
                  - echo "we are in the pre build phase"
                  - cd ~
                  - export docker_path=`pwd`
                  - echo $docker_path
                  - echo $CODEBUILD_SRC_DIR
          ## Keys Acquisition
                  - mkdir -p ~/.ssh
                  - cd ~/.ssh
                  - pwd
                  - aws s3 cp s3://$CodeBucket/v1/codepipeline/keys/.ssh/config ~/.ssh/config
                  - chmod 600 ~/.ssh/config
                  - aws s3 cp s3://$CodeBucket/v1/codepipeline/keys/.ssh/codecommit ~/.ssh/dmpcodecommit
                  - chmod 600 ~/.ssh/dmpcodecommit
            build:
              commands:
                  - cd $CODEBUILD_SRC_DIR
                  - git clone --branch $env ssh://git-codecommit.$Region.amazonaws.com/v1/repos/$AccountName-$MarketCode-$BusinessUnit-$ApplicationName ~/$AccountName-$MarketCode-$BusinessUnit-$ApplicationName
                  - cd ~/$AccountName-$MarketCode-$BusinessUnit-$ApplicationName
                  - mydate=$(date +"%Y%m%d%H%M%S")
                  - git checkout -b rel.$mydate $env
                  - git push origin rel.$mydate $env
      TimeoutInMinutes: 10
      Tags:
        - Key: "Application"
          Value: !Ref ApplicationName
        - Key: "AWSRegion"
          Value: !Ref "AWS::Region"
        - Key: "AccountID"
          Value: !Ref "AWS::AccountId"
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "MarketCode"
          Value: !Ref MarketCode
        - Key: "Organization"
          Value: "Commercial IT"
        - Key: "Owner"
          Value: !Ref BusinessUnit
        - Key: "Version"
          Value: "1"

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ "-", [!Ref AccountName,!Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName, "codebuild", !Ref Environment] ]
      Description: !Ref ApplicationName
      EncryptionKey: !Ref CMKARN
      ServiceRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AccountName}-${MarketCode}-sharp-${BusinessUnit}-cicd-role-${Environment}'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: S3Bucket
            Value: !Join ["-", [!Ref AccountName, !Ref MarketCode, !Ref BusinessUnit, "artifacts", "dev"]]
          - Name : appname
            Value: !Join [ "-", [!Ref AccountName,!Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName] ]
          - Name : env
            Value: !Ref Environment
          - Name: ApplicationName
            Value: !Ref ApplicationName
          - Name: AccountName
            Value: !Ref AccountName
          - Name: MarketCode
            Value: !Ref MarketCode
          - Name: BusinessUnit
            Value: !Ref BusinessUnit
          - Name: CodeBucket
            Value: !Ref CodeBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.7
              commands:
                  - echo "We are in install phase"
            pre_build:
              commands:
                  - echo "we are in the pre build phase"
                  - cd ~
                  - export docker_path=`pwd`
                  - echo $docker_path
                  - echo $CODEBUILD_SRC_DIR
          ## Keys Acquisition
                  - mkdir -p ~/.ssh
                  - cd ~/.ssh
                  - pwd
                  - aws s3 cp s3://$CodeBucket/v1/codepipeline/keys/.ssh/config ~/.ssh/config
                  - chmod 600 ~/.ssh/config
                  - aws s3 cp s3://$CodeBucket/v1/codepipeline/keys/.ssh/codecommit ~/.ssh/dmpcodecommit
                  - chmod 600 ~/.ssh/dmpcodecommit
          ## Directory Creation
                  - mkdir -p ~/staging
                  - mkdir -p ~/python/lib/python3.8/site-packages/
                  - mkdir -p ~/dmp_framework/
                  - mydate=$(date +"%Y%m%d")
                  - mkdir -p ~/$env/$mydate
                  - mkdir -p ~/yaml_processor
                  - mkdir -p ~/sam/bin/lambda
                  - mkdir -p ~/sam/bin/prechecklambda
                  - mkdir -p ~/sam/bin/prechecklambdalayer
                  - mkdir -p ~/datasets
                  - mkdir -p ~/trigger
                  - mkdir -p ~/framework
            build:
              commands:
                  - cd $CODEBUILD_SRC_DIR
                  - pip install . -t ~/python/lib/python3.8/site-packages/
                  - cd ~/python/lib/python3.8/site-packages/
                  - rm -rf *.dist-info 
                  - ls  -lrt ~
                  - cd ~
                  - zip -r ~/dmp_precheck_layer.zip python
                  - cp -R ~/python ~/sam/bin/prechecklambdalayer/python
                  - cd ~/python/lib/python3.8/site-packages/
                  - cp $CODEBUILD_SRC_DIR/sharp-requirements.txt ~/staging/requirements.txt
                  - sed -e 's/\r//g' ~/staging/requirements.txt > ~/staging/requirements_upd.txt
                  - for a in `cat ~/staging/requirements_upd.txt`;
                     do
                      cp -R ~/python/lib/python3.8/site-packages/$a ~/framework/$a;
                     done
                  - ls -lrt ~/framework/
                  - cd ~/framework  
                  - zip -r ~/dmp_framework.zip *
                  - ls -lrt ~ 
                  - cp ~/dmp_precheck_layer.zip ~/$env/$mydate/dmp_precheck_layer.zip
                  - cp ~/dmp_framework.zip ~/$env/$mydate/dmp_framework.zip
                  - aws s3 cp ~/$env s3://$S3Bucket/$appname/$env --recursive
                  ##Yaml Processor
                  - cp $CODEBUILD_SRC_DIR/packages/yaml_processor.py ~/yaml_processor/yaml_processor.py
                  - cd ~/yaml_processor/
                  - aws s3 cp ./yaml_processor.py s3://$S3Bucket/$appname/$env/$mydate/yaml_processor.py
                  ##Handling Application Datasets
                  - cp -R $CODEBUILD_SRC_DIR/$ApplicationName ~/datasets/$ApplicationName
                  - cd ~/datasets/
                  - aws s3 cp ./$ApplicationName s3://$S3Bucket/$appname/$env/$mydate/$ApplicationName --recursive
                  ##Create a trigger for  Orchestration
                  - cd ~/trigger
                  - touch $ApplicationName.orchestration
                  - aws s3 cp ./$ApplicationName.orchestration s3://$S3Bucket/$appname/$env/$mydate/$ApplicationName.orchestration
                  ##Update sam template
                  - cp $CODEBUILD_SRC_DIR/bin/sam.yaml ~/sam/sam.yaml
                  - cp $CODEBUILD_SRC_DIR/bin/lambda/index.py ~/sam/bin/lambda/index.py
                  - cp $CODEBUILD_SRC_DIR/lambda/*.py ~/sam/bin/prechecklambda/prechecklambda.py
                  - cd ~/sam
                  - ls -lrt
                  - cat ~/sam/sam.yaml|grep BuildId
                  - echo $CODEBUILD_BUILD_ID
                  - sed -e "s/BuildId.*/BuildId | $CODEBUILD_BUILD_ID/g" ~/sam/sam.yaml > ~/sam/cfn.yaml
                  - cat ~/sam/cfn.yaml|grep BuildId
                  - aws cloudformation package --template-file ~/sam/cfn.yaml --s3-bucket $S3Bucket --s3-prefix $appname/$env --output-template-file ~/samtemplate.yaml
          artifacts:
            files: samtemplate.yaml
            base-directory: $docker_path
            discard-paths: yes
      TimeoutInMinutes: 10
      Tags:
        - Key: "Application"
          Value: !Ref ApplicationName
        - Key: "AWSRegion"
          Value: !Ref "AWS::Region"
        - Key: "AccountID"
          Value: !Ref "AWS::AccountId"
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "MarketCode"
          Value: !Ref MarketCode
        - Key: "Organization"
          Value: "Commercial IT"
        - Key: "Owner"
          Value: !Ref BusinessUnit
        - Key: "Version"
          Value: "1"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
        - S3ArtifactsBucketPolicy
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AccountName}-${MarketCode}-sharp-${BusinessUnit}-cicd-role-${Environment}'
      Name: !Join [ "-", [!Ref AccountName,!Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName, "codepipeline", !Ref Environment] ]
      ArtifactStore:
         Type: S3
         Location: !Join ["-", [!Ref AccountName, !Ref MarketCode, !Ref BusinessUnit, "artifacts", "dev"]]
         EncryptionKey:
           Id: !Ref CMKARN
           Type: KMS
      Tags:
        - Key: "Application"
          Value: !Ref ApplicationName
        - Key: "AWSRegion"
          Value: !Ref "AWS::Region"
        - Key: "AccountID"
          Value: !Ref "AWS::AccountId"
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "MarketCode"
          Value: !Ref MarketCode
        - Key: "Organization"
          Value: "Commercial IT"
        - Key: "Owner"
          Value: !Ref BusinessUnit
        - Key: "Version"
          Value: "1"
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !Join [ "-", [!Ref AccountName, !Ref MarketCode, !Ref BusinessUnit, !Ref ApplicationName] ]
                BranchName: !Ref CodeCommitBranch
              OutputArtifacts:
                - Name: !Join [ "-", ["codecommit", !Ref ApplicationName, "artifacts"] ]
              RunOrder: 1
        -
          Name: Build
          Actions:
          -
            Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
            InputArtifacts:
              - Name: !Join [ "-", ["codecommit", !Ref ApplicationName, "artifacts"] ]
            OutputArtifacts:
              - Name: !Join [ "-", ["codebuild", !Ref ApplicationName, "artifacts"] ]
        - Name: !Sub DeployTo${Environment}
          Actions:
          - 
            Name: CreateChangeSet
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ChangeSetName: !Sub ${AccountName}-${MarketCode}-${BusinessUnit}-${ApplicationName}-changeset
              ActionMode: CHANGE_SET_REPLACE
              StackName: !Sub ${AccountName}-${MarketCode}-${BusinessUnit}-${ApplicationName}-changeset
              Capabilities: CAPABILITY_NAMED_IAM
              TemplatePath: !Sub codebuild-${ApplicationName}-artifacts::samtemplate.yaml
              RoleArn: !If [ TestEnv, !Sub 'arn:aws:iam::${TestAccount}:role/azcdi-cloudformation-deploy-role', !Sub 'arn:aws:iam::${ProdAccount}:role/azcdi-cloudformation-deploy-role' ]
              ParameterOverrides: !Sub |
               {
               "CostCenter": "${CostCenter}",
               "AccountName": "${AccountName}",
               "Environment": "${Environment}",
               "MarketCode": "${MarketCode}",
               "BusinessUnit": "${BusinessUnit}",
               "ApplicationName": "${ApplicationName}",
               "CodeBucket": "${CodeBucket}",
               "SecurityGroups": "${SecurityGroups}",
               "SubnetId": "${SubnetId}"
               }
            InputArtifacts:
              - Name: !Join [ "-", ["codebuild", !Ref ApplicationName, "artifacts"] ]
            RunOrder: 1
            RoleArn: !If [TestEnv, !Sub 'arn:aws:iam::${TestAccount}:role/AWSCloudFormationStackSetExecutionRole', !Sub 'arn:aws:iam::${ProdAccount}:role/AWSCloudFormationStackSetExecutionRole' ]
          - Name: DeployChangeSet
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ChangeSetName: !Sub ${AccountName}-${MarketCode}-${BusinessUnit}-${ApplicationName}-changeset
              ActionMode: CHANGE_SET_EXECUTE
              StackName: !Sub ${AccountName}-${MarketCode}-${BusinessUnit}-${ApplicationName}-changeset
              RoleArn: !If [TestEnv, !Sub 'arn:aws:iam::${TestAccount}:role/azcdi-cloudformation-deploy-role', !Sub 'arn:aws:iam::${ProdAccount}:role/azcdi-cloudformation-deploy-role' ]
              ParameterOverrides: !Sub |
               {
               "CostCenter": "${CostCenter}",
               "AccountName": "${AccountName}",
               "Environment": "${Environment}",
               "MarketCode": "${MarketCode}",
               "BusinessUnit": "${BusinessUnit}",
               "ApplicationName": "${ApplicationName}",
               "CodeBucket": "${CodeBucket}",
               "SecurityGroups": "${SecurityGroups}",
               "SubnetId": "${SubnetId}"
               }
            InputArtifacts:
              - Name: !Sub codebuild-${ApplicationName}-artifacts
            RunOrder: 2
            RoleArn: !If [TestEnv, !Sub 'arn:aws:iam::${TestAccount}:role/AWSCloudFormationStackSetExecutionRole', !Sub 'arn:aws:iam::${ProdAccount}:role/AWSCloudFormationStackSetExecutionRole' ]
        - !If
          - TestEnv
          - 
            Name: ApprovalForCreatingReleaseBranch
            Actions:
             - Name: ApprovalForCreatingReleaseBranch
               ActionTypeId:
                 Category: Approval
                 Owner: AWS
                 Version: 1
                 Provider: Manual
               Configuration:
                 CustomData: !Sub 'Review the latest code changes for ${ApplicationName} assoicated with BU ${BusinessUnit} deployed to the test environment.'
                 NotificationArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AccountName}-${MarketCode}-${BusinessUnit}-${ApplicationName}-snstopic-${Environment}'
               RunOrder: 1
          - !Ref AWS::NoValue
        - !If
          - TestEnv
          - 
            Name: ReleaseBranchCreation
            Actions:
              - Name: ReleaseBranchCreation
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Ref ReleaseBranchCreation
                RunOrder: 1
                InputArtifacts:
                  - Name: !Join [ "-", ["codecommit", !Ref ApplicationName, "artifacts"] ]
          - !Ref AWS::NoValue